#!/bin/sh
# Name : ScanPro
# Date : May 2022
# Description : ScanPro is a ScanPro Scan scripts for hacker's.
# Set up symbols
# |
clear
# |
dirty_synced="*"
unpushed="△"
dirty_unpushed="▲"
unpulled="▽"
dirty_unpulled="▼"
unpushed_unpulled="⬡"
dirty_unpushed_unpulled="⬢"
# |
nc="\033[00m"
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[32m"
yellow="\033[33m"
purple="\033[0;35m"
cyan="\033[1;36m"
cafe="\033[1;33m"
fiuscha="\033[0;35m"
blue="\033[34m"
orange="\033[38;5;122m"
# |
RED="$(printf '\033[31m')"
GREEN="$(printf '\033[32m')"
ORANGE="$(printf '\033[33m')"
BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')"
CYAN="$(printf '\033[36m')"
WHITE="$(printf '\033[37m')"
BLACK="$(printf '\033[30m')"
REDBG="$(printf '\033[41m')"
GREENBG="$(printf '\033[42m')"
ORANGEBG="$(printf '\033[43m')"
BLUEBG="$(printf '\033[44m')"
MAGENTABG="$(printf '\033[45m')"
CYANBG="$(printf '\033[46m')"
WHITEBG="$(printf '\033[47m')"
BLACKBG="$(printf '\033[40m')"
RESETBG="$(printf '\e[0m')"
BLINK="$(printf '\033[5;31m')"
# |
portsr="1"
close=$(echo "${yellow}\n\t\tPress ${cyan}Enter ${yellow}to go Back \n")
lastprompt=$(echo "  ${orange}  └──╼${orange}")
portrange=$(echo "  | Enter Port Range 1-65535: ${green}")
ipList=$(echo "  | Where is IP List File? : ${green}")
hostip=$(echo "  | Enter IP Target or Host: ${green}")
hostport=$(echo "  | Open Port on Target or Host:  ${green}")
# |
PromptFun(){
  echo ""
  echo "${orange} ┌──[${CYAN}Anlominus${purple}👽${red}Scan${BLUE}Pro$~${orange}]${cyan}"
  # echo "${lastprompt}"
  # read -p "    └──╼ Enter selection [0-7] > "
}
prompt="$(PromptFun)"
ReadSomthing(){
  echo "
$cWall    ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓$cWall
$cWall    ▓  ╔═══════════════════════════════════════╗  ▓$cWall
$cWall    ▓  ╠═>   Press ENTER for back to Menu   <==║  ▓$cWall
$cWall    ▓  ╚═══════════════════════════════════════╝  ▓$cWall
$cWall    ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓$cWall"
  echo -n ""
  read read_somthing
}
ip_List(){
  echo ""
  echo "${blue}  |"
  echo "${cyan}  |---------------------------------"
  read -p  "${ipList}" iplist
  echo "${cyan}  |---------------------------------"
  echo "${blue}  |"
  echo "${cyan}"
}
port_Range(){
  echo ""
  echo "${blue}  |"
  echo "${cyan}  |---------------------------------"
  read -p  "${portrange}" portrange
  echo "${cyan}  |---------------------------------"
  echo "${blue}  |"
  echo "${cyan}"
}
What_IP(){
  echo ""
  echo "${blue}  |"
  echo "${cyan}  |---------------------------------"
  read -p  "${hostip}" host
  echo "${cyan}  |---------------------------------"
  echo "${blue}  |"
  echo "${cyan}"
}
What_PORT(){
  echo ""
  echo "${blue}  |"
  echo "${cyan}  |-------------------------------"
  read -p  "${hostport}" port
  echo "${cyan}  |-------------------------------"
  echo "${blue}  |"
  echo "${cyan}"

}
What_IP
What_PORT
your_choice(){
  echo "\n${cyan}  |"
  echo "  |${cafe} [#] Basic Information"
  echo "${cyan}  |-----------------------------"
  echo "${cyan}  |${green} [!] Your Host Target is:${cafe} $host"
  echo "${cyan}  |${green} [!] Your Port Target is:${cafe} $port"
  echo "${cyan}  |-----------------------------"
  echo "${cyan}  |"
}

prcscn(){
  clear
  echo "${yellow}\n[!] Scanning: ${cyan}${IP_TARGET}${yellow} [ Please Wait ]\n"
  echo
}
# Menu Contents
Menu(){
  while true; do
    #statements
    clear
    your_choice
    #statements
    echo "\n  [#] ScanPro  ${cyan}"
    echo "      [1] Target Selection"
    echo "      [2] Port Selection"
    echo "      [3] Scan Types"
    echo "      [4] Service and Operating System Detection"
    echo "      [5] Output formats"
    echo "      [6] NSE Scripting"
    echo "      [7] HTTP info gathering"
    echo " "
    echo "      [m] Main Menu"
    echo "      [x] Exit"
    echo " "
    echo "      ${prompt}"
    read -p " └──╼ Enter selection [0-7] > " cmd
    case ${cmd} in
      1)
      nts
      ReadSomthing
      ;;
      2)
      nps
      ReadSomthing
      ;;
      3)
      npst
      ReadSomthing
      ;;
      4)
      saod
      ReadSomthing
      ;;
      5)
      nof
      ReadSomthing
      ;;
      6)
      ddwns
      ReadSomthing
      ;;
      7)
      hsi
      ReadSomthing
      ;;
      m)
      Menu
      ;;
      x)
      clear
      break
      ;;
      *)
      echo "Invalid entry."
      sleep 0.3
      ;;
    esac
  done
}
#1 Nmap Target Selection
nts(){
  while true; do
    #statements
    clear
    your_choice
    #statements
    echo ""
    echo "${cafe} [#] Nmap Target Selection ${cyan}"
    echo ""
    echo "     [1] Scan a single IP	nmap 192.168.1.1"
    echo "     [2] Scan a host	nmap www.testhostname.com"
    echo "     [3] Scan a range of IPs	nmap 192.168.1.1-20"
    echo "     [4] Scan a subnet	nmap 192.168.1.0/24"
    echo "     [5] Scan targets from a text file	nmap -iL list-of-ips.txt"
    echo " "
    echo "      [m] Main Menu"
    echo "      [x] Exit"
    echo " "
    echo "      ${prompt}"
    read -p " └──╼ Enter selection [0-4] > " cmd
    case ${cmd} in
      1)
      #statements
      nmap ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      2)
      #statements
      nmap ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      3)
      nmap ${host}-20
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      4)
      nmap ${host}/24
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      5)
      ip_List
      nmap -iL ${iplist}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      m)
      Menu
      ;;
      x)
      clear
      exit
      ;;
      *)
      echo "Invalid entry."
      sleep 0.3
      ;;
    esac
  done
}
#2 Nmap Port Selection
nps(){
    while true; do
      #statements
      clear
      your_choice
      #statements
      echo ""
      echo "${cafe} [#] Nmap Port Selection ${cyan}"
      echo "     [1] Scan a single Port	nmap -p 22 192.168.1.1"
      echo "     [2] Scan a range of ports	nmap -p 1-100 192.168.1.1"
      echo "     [3] Scan a range of ports	nmap -p 1-500 192.168.1.1"
      echo "     [4] Scan 100 most common ports (Fast)	nmap -F 192.168.1.1"
      echo "     [5] Scan all 65535 ports	nmap -p- 192.168.1.1"
      echo " "
      echo "      [m] Main Menu"
      echo "      [x] Exit"
      echo " "
      echo "      ${prompt}"
      read -p " └──╼ Enter selection [0-7] > " cmd
      case ${cmd} in
        1)
        #statements
        echo "     [1] Scan a single Port	nmap -p 22 192.168.1.1"
        nmap -p ${portsr} ${host}
        read -p "${close}" som3th1ng
        ReadSomthing
        ;;
        2)
        #statements
        echo "     [2] Scan a range of ports	nmap -p 1-100 192.168.1.1"
        nmap -p ${portsr}-100 ${host}
        read -p "${close}" som3th1ng
        ReadSomthing
        ;;
        3)
        #statements
        echo "     [3] Scan a range of ports	nmap -p 1-500 192.168.1.1"
        nmap -p ${portsr}-255 ${host}
        read -p "${close}" som3th1ng
        ReadSomthing
        ;;
        4)
        #statements
        echo "     [4] Scan 100 most common ports (Fast)	nmap -F 192.168.1.1"
        nmap -F ${host}
        read -p "${close}" som3th1ng
        ReadSomthing
        ;;
        5)
        #statements
        echo "     [5] Scan all 65535 ports	nmap -p- 192.168.1.1"
        nmap -p- ${host}
        read -p "${close}" som3th1ng
        ReadSomthing
        ;;
        m)
        Menu
        ;;
        x)
        clear
        exit
        ;;
        *)
        echo "Invalid entry."
        sleep 0.3
        ;;
      esac
    done
echo ""
echo ""
}
#3 Nmap Port Scan types
npst(){
  while true; do
    #statements
    clear
    your_choice
    #statements
    echo ""
    echo "${cafe} [#] Nmap Port Scan types ${cyan}"
    echo "     [1] Scan using TCP connect	nmap -sT 192.168.1.1"
    echo "     [2] Scan using TCP SYN scan (default)	nmap -sS 192.168.1.1"
    echo "     [3] Scan UDP ports	nmap -sU -p 123,161,162 192.168.1.1"
    echo "     [4] Scan selected ports - ignore discovery	nmap -Pn -F 192.168.1.1"
    echo " "
    echo "      [m] Main Menu"
    echo "      [x] Exit"
    echo " "
    echo "      ${prompt}"
    read -p " └──╼ Enter selection [0-4] > " cmd
    case ${cmd} in
      1)
      #statements
      nmap -sT ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      2)
      #statements
      nmap -sS ${portrange} ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      3)
      nmap -sU -p ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      4)
      nmap -Pn -F ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      m)
      Menu
      ;;
      x)
      clear
      exit
      ;;
      *)
      echo "Invalid entry."
      sleep 0.3
      ;;
    esac
  done
}
#4 Service and OS Detection
saod(){
  while true; do
    #statements
    clear
    your_choice
    #statements
    echo ""
    echo "${cafe} [#] Service and OS Detection ${cyan}"
    echo "     [1] Detect OS and Services	nmap -A 192.168.1.1"
    echo "     [2] Standard service detection	nmap -sV 192.168.1.1"
    echo "     [3] More aggressive Service Detection	nmap -sV --version-intensity 5 192.168.1.1"
    echo "     [4] Lighter banner grabbing detection	nmap -sV --version-intensity 0 192.168.1.1"
    echo "     [5] Detect OS nmap -O 192.168.1.1"
    echo " "
    echo "      [m] Main Menu"
    echo "      [x] Exit"
    echo " "
    echo "      ${prompt}"
    read -p " └──╼ Enter selection [0-4] > " cmd
    case ${cmd} in
      1)
      #statements
      nmap -A ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      2)
      #statements
      nmap -sV ${portrange} ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      3)
      nmap -sV --version 5 ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      4)
      nmap -sV --version 1 ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      5)
      nmap -O ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      m)
      Menu
      ;;
      x)
      clear
      exit
      ;;
      *)
      echo "Invalid entry."
      sleep 0.3
      ;;
    esac
  done
echo ""
}
#5 Nmap Output Formats
nof(){
echo ""
echo "${cafe} [#] Nmap Output Formats ${cyan}"
echo "     [1] Save default output to file	nmap -oN outputfile.txt 192.168.1.1"
echo "     [2] Save results as XML	nmap -oX outputfile.xml 192.168.1.1"
echo "     [3] Save results in a format for grep	nmap -oG outputfile.txt 192.168.1.1"
echo "     [4] Save in all formats	nmap -oA outputfile 192.168.1.1"
echo ""
}
#6 Digging deeper with NSE Scripts
ddwns(){
  while true; do
    #statements
    clear
    your_choice
    #statements
    echo ""
    echo "${cafe} [#] Digging deeper with NSE Scripts ${cyan}"
    echo "     [1] Scan using default safe scripts	nmap -sV -sC 192.168.1.1"
    echo "     [2] Get help for a script	nmap --script-help=ssl-heartbleed"
    echo "     [3] Scan using a specific NSE script	nmap -sV -p 443 –script=ssl-heartbleed.nse 192.168.1.1"
    echo "     [4] Scan with a set of scripts	nmap -sV --script=smb* 192.168.1.1"
    echo "     [5] Vulnerability Script	nmap -sV --script=vuln 192.168.1.1"
    echo " "
    echo "      [m] Main Menu"
    echo "      [x] Exit"
    echo " "
    echo "      ${prompt}"
    read -p " └──╼ Enter selection [0-4] > " cmd
    case ${cmd} in
      1)
      #statements
      nmap -sV -sC ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      2)
      #statements
      nmap --script-help=ssl-heartbleed
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      3)
      nmap -sV -p 443 --script=ssl-heartbleed.nse ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      4)
      nmap -sV --script=smb*  ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      5)
      nmap -A -sC --script=vuln  ${host}
      read -p "${close}" som3th1ng
      ReadSomthing
      ;;
      m)
      Menu
      ;;
      x)
      clear
      exit
      ;;
      *)
      echo "Invalid entry."
      sleep 0.3
      ;;
    esac
  done
echo ""
}
#7 HTTP Service Information
hsi(){
echo ""
echo "${cafe} [#] HTTP Service Information ${cyan}"
echo "     [1] Gather page titles from HTTP services	nmap --script=http-title 192.168.1.0/24"
echo "     [2] Get HTTP headers of web services	nmap --script=http-headers 192.168.1.0/24"
echo "     [3] Find web apps from known paths	nmap --script=http-enum 192.168.1.0/24"
echo ""
}

Menu
